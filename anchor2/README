$event = {
	string => $string,
	element => $element,
	attr => \%attr,
	block_depth => $block_depth,
	depth => $depth,
	type => $type

	block_id =>  block id,
	id => anchor id,
	anchor_tag => anchor tag,
}

how about ->out(id)
just do an out on a specific id?

include
<anc:include id="tpl.xyz" blockid="abc" prefix="pre_" replaceid="mno"/>

	id => template id. Every Set has a template keyed by id
	blockid = <block id>
	prefix = "pre_" every id in block is prefixed
	replaceid = replace included block id with this id

	include automatically leaves out xmldecl and final


::Set -> add(id => Temlate)
supply ID or use root id in Temlate
store Tpl extract all block ids from templates
store Tpl extract all include ids from templates

notionally one template is the "root" or start template.
This needs to be resolved with an include call
Template->include(Template::Set)
	get list of include IDs from Template Set

	recurse over its list of include IDs
	if (no inlude id) {
			we are at leaf node 
			process the "leaf" contents
	}
	else {recurse again - resolve all nodes }

	check for recursion loop - keep track of all seen block ids


Template::Anchor::Set
	get the instance from here
	Only the ::Set will have a ref to all Templates!




new(list of templates)
list of templates - each template needs need a top level unique root id



Template::DeepLink::Set


Template::Anchor structure:
file -> "min3.xml"
root_id -> "root"
xmldecl -> <?xml version="1.0"?>
xmlend -> ''
content ->  array of hashes [ idx, id, type]
     idx = index into text array
     id = root_id, var_id
     type = "block_start | block | block_end | include | var

ids -> hash of ids 
	{ [idx | start, end],  type }
		start = start content index
                end = end content index
		idx = one content index (start = end)
                type = block | var
text -> array of text content [  .... 

includes -> list of includes from content


